{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kalpa\\\\Downloads\\\\New folder\\\\New folder\\\\src\\\\components\\\\WebSite\\\\Pages\\\\Home\\\\Search.js\";\nimport React from 'react'; // import './Placesapi.css'\n\nimport DoctorSearch from '../../Pages/DynamicComponents/SearchBar/app/DoctorSearch';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setCurrentLocation = data => {\n      this.currentLocation = data;\n      this.setState({\n        address: data.address_components[0].long_name\n      });\n    };\n\n    this.getApproxAddress = async (lat, long) => {\n      // return await fetch(\n      //   `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&result_type=street_address|political|locality|sublocality|neighborhood|premise|subpremise&key=AIzaSyBgZl9hJTsIqoYnfZmmFDi6oKqg3QNYN5s&libraries=places`\n      // )\n      //   .then((response) => response.json())\n      //   .then(async (data) => {\n      //     console.log('Map Response: ', data)\n      //     if (data.status === 'OK' && data.results.length > 0) {\n      //       this.setCurrentLocation(data.results[0])\n      //     }\n      //   })\n      return null;\n    };\n\n    this.getNearbyPlaces = async () => {\n      this.setState({\n        isChanged: false\n      });\n      const {\n        latitude,\n        longitude\n      } = this.state;\n      console.log(latitude, longitude); // const URL = `https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${latitude\n      //   },${longitude}&type=bus_station|post_office|tourist_attraction|train_station|hospital&radius=${5000 *\n      //   1000}&key=AIzaSyBgZl9hJTsIqoYnfZmmFDi6oKqg3QNYN5s`;\n      // axios\n      //   .get(URL)\n      //   .then(response => {\n      //     console.log(response.data.results);\n      //     this.formatSuggestions(response.data.results)\n      //   })\n      //   .catch(error => {\n      //     console.log(error.message);\n      //   });\n    };\n\n    this.formatSuggestions = results => {\n      const formattedResults = results.map(function (k) {\n        return {\n          description: k.name,\n          id: k.place_id,\n          types: [\"locality\", \"political\", \"geocode\"],\n          formattedSuggestion: {\n            mainText: k.name,\n            secondaryText: k.vicinity\n          }\n        };\n      });\n      console.log('formattedResults', formattedResults);\n      this.setState({\n        initialSuggestions: formattedResults\n      });\n    };\n\n    this.handleChange = address => {\n      this.setState({\n        isChanged: true\n      });\n      this.setState({\n        address\n      });\n    };\n\n    this.handleSelect = address => {\n      geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => console.log('Success', latLng)).catch(error => console.error('Error', error));\n    };\n\n    this.fetchSuggestions = () => {\n      console.log('fetching suggestions');\n      this.getNearbyPlaces();\n    };\n\n    this.state = {\n      address: '',\n      currentLocation: null,\n      initialSuggestions: [],\n      latitude: null,\n      longitude: null,\n      isChanged: false\n    };\n  }\n\n  componentDidMount() {\n    this.getGeoLocation();\n\n    let _this = this;\n\n    document.addEventListener('click', function (e) {\n      console.log('e', e.target.className);\n\n      if (!e.target.className.includes('location-search-input')) {\n        _this.setState({\n          isChanged: true\n        });\n      }\n    }, false);\n  }\n\n  getGeoLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(({\n        coords\n      }) => {\n        const {\n          latitude,\n          longitude\n        } = coords;\n        console.log('latlong', latitude, longitude);\n        this.setState({\n          latitude: latitude,\n          longitude: longitude\n        });\n        this.currentLocation = this.getApproxAddress(latitude, longitude);\n      });\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: this.state.address,\n      onChange: this.handleChange,\n      onSelect: this.handleSelect,\n      children: ({\n        getInputProps,\n        suggestions,\n        getSuggestionItemProps,\n        loading\n      }) => {\n        console.log('suggesstions', suggestions);\n        const iterableSuggestion = this.state.isChanged ? suggestions : this.state.initialSuggestions;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"search-box\",\n            style: {\n              padding: \"0\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"form-design\",\n              action: \"assets/webpages/list.html\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"search-location\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  style: {\n                    borderBottomLeftRadius: 20,\n                    borderTopLeftRadius: 20,\n                    borderColor: \"#a49d9d !important\"\n                  },\n                  ...getInputProps({\n                    placeholder: 'Search Places ...',\n                    className: 'location-search-input'\n                  }),\n                  type: \"text\",\n                  id: \"location\",\n                  placeholder: \"Search Location\",\n                  onFocus: this.fetchSuggestions\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"autocomplete-dropdown-container\",\n                  children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: \"Loading...\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 135,\n                    columnNumber: 35\n                  }, this), iterableSuggestion.map(suggestion => {\n                    const style = suggestion.active ? {\n                      backgroundColor: 'rgba(238, 238, 232)',\n                      padding: \".5rem\"\n                    } : {\n                      backgroundColor: '#fdfdfd',\n                      padding: \".5rem\"\n                    };\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"input-suggestionz\",\n                      ...getSuggestionItemProps(suggestion, {\n                        style\n                      }),\n                      children: /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          cursor: 'pointer'\n                        },\n                        onClick: () => {\n                          this.handleChange(suggestion.description);\n                        },\n                        children: suggestion.description\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 148,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 142,\n                      columnNumber: 27\n                    }, this);\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"search-info\",\n                children: /*#__PURE__*/_jsxDEV(DoctorSearch, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"searchbutton\",\n                children: \"Search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["C:/Users/kalpa/Downloads/New folder/New folder/src/components/WebSite/Pages/Home/Search.js"],"names":["React","DoctorSearch","PlacesAutocomplete","geocodeByAddress","getLatLng","axios","Search","Component","constructor","props","setCurrentLocation","data","currentLocation","setState","address","address_components","long_name","getApproxAddress","lat","long","getNearbyPlaces","isChanged","latitude","longitude","state","console","log","formatSuggestions","results","formattedResults","map","k","description","name","id","place_id","types","formattedSuggestion","mainText","secondaryText","vicinity","initialSuggestions","handleChange","handleSelect","then","latLng","catch","error","fetchSuggestions","componentDidMount","getGeoLocation","_this","document","addEventListener","e","target","className","includes","navigator","geolocation","getCurrentPosition","coords","render","getInputProps","suggestions","getSuggestionItemProps","loading","iterableSuggestion","padding","borderBottomLeftRadius","borderTopLeftRadius","borderColor","placeholder","suggestion","style","active","backgroundColor","cursor"],"mappings":"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","sourcesContent":["import React from 'react'\n// import './Placesapi.css'\nimport DoctorSearch from '../../Pages/DynamicComponents/SearchBar/app/DoctorSearch'\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\nimport axios from \"axios\";\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: '',\n      currentLocation: null,\n      initialSuggestions: [],\n      latitude: null,\n      longitude: null,\n      isChanged: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getGeoLocation()\n    let _this = this\n    document.addEventListener('click', function (e) {\n      console.log('e', e.target.className)\n      if (!e.target.className.includes('location-search-input')) {\n        _this.setState({ isChanged: true })\n      }\n    }, false);\n  }\n\n  getGeoLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(({ coords }) => {\n        const { latitude, longitude } = coords\n        console.log('latlong', latitude, longitude)\n        this.setState({ latitude: latitude, longitude: longitude })\n        this.currentLocation = this.getApproxAddress(latitude, longitude)\n      })\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  setCurrentLocation = (data) => {\n    this.currentLocation = data\n    this.setState({ address: data.address_components[0].long_name })\n  }\n\n  getApproxAddress = async (lat, long) => {\n    // return await fetch(\n    //   `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&result_type=street_address|political|locality|sublocality|neighborhood|premise|subpremise&key=AIzaSyBgZl9hJTsIqoYnfZmmFDi6oKqg3QNYN5s&libraries=places`\n    // )\n    //   .then((response) => response.json())\n    //   .then(async (data) => {\n    //     console.log('Map Response: ', data)\n    //     if (data.status === 'OK' && data.results.length > 0) {\n    //       this.setCurrentLocation(data.results[0])\n    //     }\n\n\n\n    //   })\n    return null\n  }\n  getNearbyPlaces = async () => {\n    this.setState({ isChanged: false })\n    const { latitude, longitude } = this.state\n    console.log(latitude, longitude)\n    // const URL = `https://cors-anywhere.herokuapp.com/https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${latitude\n    //   },${longitude}&type=bus_station|post_office|tourist_attraction|train_station|hospital&radius=${5000 *\n    //   1000}&key=AIzaSyBgZl9hJTsIqoYnfZmmFDi6oKqg3QNYN5s`;\n    // axios\n    //   .get(URL)\n    //   .then(response => {\n    //     console.log(response.data.results);\n    //     this.formatSuggestions(response.data.results)\n    //   })\n    //   .catch(error => {\n    //     console.log(error.message);\n    //   });\n  }\n\n  formatSuggestions = (results) => {\n    const formattedResults = results\n      .map(function (k) {\n        return {\n          description: k.name,\n          id: k.place_id,\n          types: [\"locality\", \"political\", \"geocode\"],\n          formattedSuggestion: { mainText: k.name, secondaryText: k.vicinity }\n        }\n      })\n    console.log('formattedResults', formattedResults)\n    this.setState({ initialSuggestions: formattedResults })\n  }\n\n  handleChange = address => {\n    this.setState({ isChanged: true })\n    this.setState({ address });\n  };\n\n  handleSelect = address => {\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => console.log('Success', latLng))\n      .catch(error => console.error('Error', error));\n  };\n\n  fetchSuggestions = () => {\n    console.log('fetching suggestions')\n    this.getNearbyPlaces()\n  }\n\n  render() {\n    return (\n      <PlacesAutocomplete\n        value={this.state.address}\n        onChange={this.handleChange}\n        onSelect={this.handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => {\n          console.log('suggesstions', suggestions)\n          const iterableSuggestion = this.state.isChanged ? suggestions : this.state.initialSuggestions\n          return (\n            <div>\n              <div className=\"search-box\" style={{ padding: \"0\" }}>\n\n                <form className=\"form-design\" action=\"assets/webpages/list.html\">\n\n                  <div className='search-location'>\n                    <input style={{ borderBottomLeftRadius: 20, borderTopLeftRadius: 20, borderColor: \"#a49d9d !important\" }} {...getInputProps({ placeholder: 'Search Places ...', className: 'location-search-input', })} type=\"text\" id=\"location\" placeholder=\"Search Location\" onFocus={this.fetchSuggestions} />\n                    <div className=\"autocomplete-dropdown-container\">\n                      {loading && <div>Loading...</div>}\n                      {iterableSuggestion.map(suggestion => {\n\n                        const style = suggestion.active\n                          ? { backgroundColor: 'rgba(238, 238, 232)', padding: \".5rem\" }\n                          : { backgroundColor: '#fdfdfd', padding: \".5rem\" };\n                        return (\n                          <div\n                            className='input-suggestionz'\n                            {...getSuggestionItemProps(suggestion, {\n                              style,\n                            })}\n                          >\n                            <span style={{ cursor: 'pointer' }} onClick={() => { this.handleChange(suggestion.description) }}>{suggestion.description}</span>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n\n                  <div className=\"search-info\">\n                    <DoctorSearch />\n                  </div>\n                  <button className=\"searchbutton\">Search</button>\n                </form>\n              </div>\n            </div>\n          )\n        }\n\n        }\n      </PlacesAutocomplete>\n    );\n\n  }\n} export default Search;"]},"metadata":{},"sourceType":"module"}